// Code generated by protoc-gen-go.
// source: graceful.proto
// DO NOT EDIT!

/*
Package graceful is a generated protocol buffer package.

It is generated from these files:
	graceful.proto

It has these top-level messages:
	Request
	Response
*/
package graceful

import (
	"fmt"
	"math"

	"github.com/golang/protobuf/proto"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	From string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type Response struct {
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "graceful.Request")
	proto.RegisterType((*Response)(nil), "graceful.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GraceService service

type GraceServiceClient interface {
	Grace(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type graceServiceClient struct {
	cc *grpc.ClientConn
}

func NewGraceServiceClient(cc *grpc.ClientConn) GraceServiceClient {
	return &graceServiceClient{cc}
}

func (c *graceServiceClient) Grace(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/graceful.GraceService/grace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GraceService service

type GraceServiceServer interface {
	Grace(context.Context, *Request) (*Response, error)
}

func RegisterGraceServiceServer(s *grpc.Server, srv GraceServiceServer) {
	s.RegisterService(&_GraceService_serviceDesc, srv)
}

func _GraceService_Grace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraceServiceServer).Grace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graceful.GraceService/Grace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraceServiceServer).Grace(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _GraceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "graceful.GraceService",
	HandlerType: (*GraceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "grace",
			Handler:    _GraceService_Grace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graceful.proto",
}

func init() { proto.RegisterFile("graceful.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2f, 0x4a, 0x4c,
	0x4e, 0x4d, 0x2b, 0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x64,
	0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0xd2, 0x8a, 0xf2,
	0x73, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x39, 0x2e, 0x8e, 0xa0, 0xd4,
	0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x90, 0x7c, 0x46, 0x7e, 0x71, 0x89, 0x04, 0x13, 0x44, 0x1e,
	0xc4, 0x36, 0xb2, 0xe3, 0xe2, 0x71, 0x07, 0x19, 0x15, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a,
	0xa4, 0xc7, 0xc5, 0x0a, 0x36, 0x5a, 0x48, 0x50, 0x0f, 0x6e, 0x25, 0xd4, 0x7c, 0x29, 0x21, 0x64,
	0x21, 0x88, 0x99, 0x49, 0x6c, 0x60, 0xf7, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x81, 0x87,
	0xc8, 0xc1, 0xa1, 0x00, 0x00, 0x00,
}
